{"ast":null,"code":"// Phần không sử API\n// // Khởi tạo state mặc định cho todoReducer\n// const initialState = {\n//   todos: [\n//     {\n//       id: 1,\n//       title: \"Learn React\",\n//       description: \"Learn React Hooks\",\n//       isCompleted: true,\n//     },\n//     {\n//       id: 2,\n//       title: \"Learn Redux\",\n//       description: \"Learn Redux vs React\",\n//       isCompleted: false,\n//     },\n//   ],\n//   // Lưu trữ trạng thái filter: all || active || completed\n//   filter: \"all\",\n//   // Lưu trữ giá trị tìm kiếm todo\n//   search: \"\",\n// };\n// // Với state là một array/object ta cần return về state là một array/object mới => luôn luôn dùng cú pháp return {...state, keyA: valueA, keyB: valueB}\n// // Trường hợp state là một object và các thuộc tính bên trong state lại là một array/object ta cũng cần phải tạo mới 1 array/object trước khi gán lại cho các thuộc tính của state\n// // Để redux nhận biết được là state đã thay đổi và cập nhật lại cho components\n// const todoReducer = (state = initialState, action) => {\n//   switch (action.type) {\n//     case \"COMPLETE_TODO\": {\n//       const todos = state.todos.map((todo) => {\n//         if (todo.id === action.data) {\n//           return { ...todo, isCompleted: true };\n//         }\n//         return todo;\n//       });\n//       return { ...state, todos };\n//     }\n//     case \"DELETE_TODO\": {\n//       const todos = state.todos.filter((todo) => todo.id !== action.data);\n//       return { ...state, todos };\n//     }\n//     case \"ADD_TODO\": {\n//       const todos = [...state.todos, action.data];\n//       return { ...state, todos };\n//     }\n//     case \"CHANGE_FILTER\": {\n//       // Nếu thay đổi state todos khi filter sẽ bị mất dữ liệu\n//       // const todos = state.todos.filter((todo) => {\n//       //   if (action.data === \"active\") {\n//       //     return !todo.isCompleted;\n//       //   }\n//       //   if (action.data === \"completed\") {\n//       //     return todo.isCompleted;\n//       //   }\n//       //   return true;\n//       // });\n//       // return { ...state, todos };\n//       return { ...state, filter: action.data };\n//     }\n//     case \"CHANGE_SEARCH_VALUE\": {\n//       return { ...state, search: action.data };\n//     }\n//     default:\n//       return state;\n//   }\n// };\nimport * as actionTypes from \"../constants/todoConstants\"; // Phần sử dụng API\n\nconst initialState = {\n  todos: [],\n  search: \"\",\n  filter: \"all\"\n};\n\nconst todoReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case actionTypes.GET_TODOS:\n      {\n        return { ...state,\n          todos: action.data\n        };\n      }\n\n    case actionTypes.CHANGE_FILTER:\n      {\n        return { ...state,\n          filter: action.data\n        };\n      }\n\n    case actionTypes.CHANGE_SEARCH:\n      {\n        return { ...state,\n          search: action.data\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default todoReducer;","map":{"version":3,"names":["actionTypes","initialState","todos","search","filter","todoReducer","state","action","type","GET_TODOS","data","CHANGE_FILTER","CHANGE_SEARCH"],"sources":["/Users/namnn/Documents/cybersoft/bc22-react/src/redux/reducers/todoReducer.js"],"sourcesContent":["// Phần không sử API\n// // Khởi tạo state mặc định cho todoReducer\n// const initialState = {\n//   todos: [\n//     {\n//       id: 1,\n//       title: \"Learn React\",\n//       description: \"Learn React Hooks\",\n//       isCompleted: true,\n//     },\n//     {\n//       id: 2,\n//       title: \"Learn Redux\",\n//       description: \"Learn Redux vs React\",\n//       isCompleted: false,\n//     },\n//   ],\n//   // Lưu trữ trạng thái filter: all || active || completed\n//   filter: \"all\",\n//   // Lưu trữ giá trị tìm kiếm todo\n//   search: \"\",\n// };\n\n// // Với state là một array/object ta cần return về state là một array/object mới => luôn luôn dùng cú pháp return {...state, keyA: valueA, keyB: valueB}\n// // Trường hợp state là một object và các thuộc tính bên trong state lại là một array/object ta cũng cần phải tạo mới 1 array/object trước khi gán lại cho các thuộc tính của state\n// // Để redux nhận biết được là state đã thay đổi và cập nhật lại cho components\n// const todoReducer = (state = initialState, action) => {\n//   switch (action.type) {\n//     case \"COMPLETE_TODO\": {\n//       const todos = state.todos.map((todo) => {\n//         if (todo.id === action.data) {\n//           return { ...todo, isCompleted: true };\n//         }\n//         return todo;\n//       });\n\n//       return { ...state, todos };\n//     }\n//     case \"DELETE_TODO\": {\n//       const todos = state.todos.filter((todo) => todo.id !== action.data);\n//       return { ...state, todos };\n//     }\n//     case \"ADD_TODO\": {\n//       const todos = [...state.todos, action.data];\n//       return { ...state, todos };\n//     }\n//     case \"CHANGE_FILTER\": {\n//       // Nếu thay đổi state todos khi filter sẽ bị mất dữ liệu\n//       // const todos = state.todos.filter((todo) => {\n//       //   if (action.data === \"active\") {\n//       //     return !todo.isCompleted;\n//       //   }\n//       //   if (action.data === \"completed\") {\n//       //     return todo.isCompleted;\n//       //   }\n//       //   return true;\n//       // });\n//       // return { ...state, todos };\n\n//       return { ...state, filter: action.data };\n//     }\n//     case \"CHANGE_SEARCH_VALUE\": {\n//       return { ...state, search: action.data };\n//     }\n//     default:\n//       return state;\n//   }\n// };\n\nimport * as actionTypes from \"../constants/todoConstants\";\n\n// Phần sử dụng API\nconst initialState = {\n  todos: [],\n  search: \"\",\n  filter: \"all\",\n};\n\nconst todoReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.GET_TODOS: {\n      return { ...state, todos: action.data };\n    }\n    case actionTypes.CHANGE_FILTER: {\n      return { ...state, filter: action.data };\n    }\n    case actionTypes.CHANGE_SEARCH: {\n      return { ...state, search: action.data };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default todoReducer;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAO,KAAKA,WAAZ,MAA6B,4BAA7B,C,CAEA;;AACA,MAAMC,YAAY,GAAG;EACnBC,KAAK,EAAE,EADY;EAEnBC,MAAM,EAAE,EAFW;EAGnBC,MAAM,EAAE;AAHW,CAArB;;AAMA,MAAMC,WAAW,GAAG,YAAkC;EAAA,IAAjCC,KAAiC,uEAAzBL,YAAyB;EAAA,IAAXM,MAAW;;EACpD,QAAQA,MAAM,CAACC,IAAf;IACE,KAAKR,WAAW,CAACS,SAAjB;MAA4B;QAC1B,OAAO,EAAE,GAAGH,KAAL;UAAYJ,KAAK,EAAEK,MAAM,CAACG;QAA1B,CAAP;MACD;;IACD,KAAKV,WAAW,CAACW,aAAjB;MAAgC;QAC9B,OAAO,EAAE,GAAGL,KAAL;UAAYF,MAAM,EAAEG,MAAM,CAACG;QAA3B,CAAP;MACD;;IACD,KAAKV,WAAW,CAACY,aAAjB;MAAgC;QAC9B,OAAO,EAAE,GAAGN,KAAL;UAAYH,MAAM,EAAEI,MAAM,CAACG;QAA3B,CAAP;MACD;;IACD;MACE,OAAOJ,KAAP;EAXJ;AAaD,CAdD;;AAgBA,eAAeD,WAAf"},"metadata":{},"sourceType":"module"}