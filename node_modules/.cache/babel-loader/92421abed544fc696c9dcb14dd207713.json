{"ast":null,"code":"import axios from \"axios\";\nimport * as actionTypes from \"../constants/todoConstants\"; // Sử dụng: dispatch(getTodos())\n// redux chỉ cho phép action là một plain object\n// VD: const getTodos = (data) => { type: \"GET_TODOS\", data }\n// Nếu muốn viết một async action ta cần dùng custom middleware\n// export const getTodos = async () => {\n//   try {\n//     // Call API\n//     const { data } = await axios.get(\n//       \"https://629757b414e756fe3b2dc8f0.mockapi.io/api/todos\"\n//     );\n//     // Thành công return về action\n//     return { type: \"GET_TODOS\", data };\n//   } catch (error) {\n//     console.log(error);\n//   }\n// };\n\nconst FILTER_MAPPING = {\n  all: undefined,\n  active: false,\n  completed: true\n}; // Khi sử dụng redux-thunk, action có thể là một function nhận vào 2 tham số là dispatch và getState\n\nexport const getTodos = () => {\n  // action thunk/middleware\n  return async (dispatch, getState) => {\n    try {\n      // Dùng hàm getState để lấy state search và filter từ store\n      const {\n        search,\n        filter\n      } = getState().todo; // Call API\n\n      const {\n        data\n      } = await axios.get(\"https://629757b414e756fe3b2dc8f0.mockapi.io/api/todos\", {\n        params: {\n          isCompleted: FILTER_MAPPING[filter],\n          title: search || undefined\n        }\n      }); // Thành công dispatch một action để đưa data vào store\n\n      dispatch({\n        type: actionTypes.GET_TODOS,\n        data\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\nexport const deleteTodo = todoId => {\n  return async dispatch => {\n    try {\n      await axios.delete(`https://629757b414e756fe3b2dc8f0.mockapi.io/api/todos/${todoId}`); // Call API delete todo thành công\n      // dispatch action getTodos để call API lấy data mới từ server và set lại state cho store\n\n      dispatch(getTodos());\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\nexport const completeTodo = todo => {\n  return async dispatch => {\n    try {\n      const {\n        id,\n        ...payload\n      } = todo;\n      await axios.put(`https://629757b414e756fe3b2dc8f0.mockapi.io/api/todos/${id}`, { ...payload,\n        isCompleted: true\n      });\n      dispatch(getTodos());\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\nexport const addTodo = (todo, onSuccess) => {\n  return async dispatch => {\n    try {\n      await axios.post(`https://629757b414e756fe3b2dc8f0.mockapi.io/api/todos`, todo);\n      dispatch(getTodos());\n      onSuccess();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\nexport const changeFilter = status => {\n  return {\n    type: actionTypes.CHANGE_FILTER,\n    data: status\n  };\n};\nexport const changeSearch = value => {\n  return {\n    type: actionTypes.CHANGE_SEARCH,\n    data: value\n  };\n};","map":{"version":3,"names":["axios","actionTypes","FILTER_MAPPING","all","undefined","active","completed","getTodos","dispatch","getState","search","filter","todo","data","get","params","isCompleted","title","type","GET_TODOS","error","console","log","deleteTodo","todoId","delete","completeTodo","id","payload","put","addTodo","onSuccess","post","changeFilter","status","CHANGE_FILTER","changeSearch","value","CHANGE_SEARCH"],"sources":["/Users/namnn/Documents/cybersoft/bc22-react/src/redux/actions/todoActions.js"],"sourcesContent":["import axios from \"axios\";\nimport * as actionTypes from \"../constants/todoConstants\";\n\n// Sử dụng: dispatch(getTodos())\n// redux chỉ cho phép action là một plain object\n// VD: const getTodos = (data) => { type: \"GET_TODOS\", data }\n// Nếu muốn viết một async action ta cần dùng custom middleware\n// export const getTodos = async () => {\n//   try {\n//     // Call API\n//     const { data } = await axios.get(\n//       \"https://629757b414e756fe3b2dc8f0.mockapi.io/api/todos\"\n//     );\n//     // Thành công return về action\n//     return { type: \"GET_TODOS\", data };\n//   } catch (error) {\n//     console.log(error);\n//   }\n// };\n\nconst FILTER_MAPPING = {\n  all: undefined,\n  active: false,\n  completed: true,\n};\n// Khi sử dụng redux-thunk, action có thể là một function nhận vào 2 tham số là dispatch và getState\nexport const getTodos = () => {\n  // action thunk/middleware\n  return async (dispatch, getState) => {\n    try {\n      // Dùng hàm getState để lấy state search và filter từ store\n      const { search, filter } = getState().todo;\n      // Call API\n      const { data } = await axios.get(\n        \"https://629757b414e756fe3b2dc8f0.mockapi.io/api/todos\",\n        {\n          params: {\n            isCompleted: FILTER_MAPPING[filter],\n            title: search || undefined,\n          },\n        }\n      );\n      // Thành công dispatch một action để đưa data vào store\n      dispatch({ type: actionTypes.GET_TODOS, data });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\nexport const deleteTodo = (todoId) => {\n  return async (dispatch) => {\n    try {\n      await axios.delete(\n        `https://629757b414e756fe3b2dc8f0.mockapi.io/api/todos/${todoId}`\n      );\n      // Call API delete todo thành công\n      // dispatch action getTodos để call API lấy data mới từ server và set lại state cho store\n      dispatch(getTodos());\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\nexport const completeTodo = (todo) => {\n  return async (dispatch) => {\n    try {\n      const { id, ...payload } = todo;\n      await axios.put(\n        `https://629757b414e756fe3b2dc8f0.mockapi.io/api/todos/${id}`,\n        { ...payload, isCompleted: true }\n      );\n      dispatch(getTodos());\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\nexport const addTodo = (todo, onSuccess) => {\n  return async (dispatch) => {\n    try {\n      await axios.post(\n        `https://629757b414e756fe3b2dc8f0.mockapi.io/api/todos`,\n        todo\n      );\n      dispatch(getTodos());\n      onSuccess();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\nexport const changeFilter = (status) => {\n  return { type: actionTypes.CHANGE_FILTER, data: status };\n};\n\nexport const changeSearch = (value) => {\n  return { type: actionTypes.CHANGE_SEARCH, data: value };\n};\n\n\n\n\n\n\n\n\n\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,WAAZ,MAA6B,4BAA7B,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,cAAc,GAAG;EACrBC,GAAG,EAAEC,SADgB;EAErBC,MAAM,EAAE,KAFa;EAGrBC,SAAS,EAAE;AAHU,CAAvB,C,CAKA;;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAM;EAC5B;EACA,OAAO,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;IACnC,IAAI;MACF;MACA,MAAM;QAAEC,MAAF;QAAUC;MAAV,IAAqBF,QAAQ,GAAGG,IAAtC,CAFE,CAGF;;MACA,MAAM;QAAEC;MAAF,IAAW,MAAMb,KAAK,CAACc,GAAN,CACrB,uDADqB,EAErB;QACEC,MAAM,EAAE;UACNC,WAAW,EAAEd,cAAc,CAACS,MAAD,CADrB;UAENM,KAAK,EAAEP,MAAM,IAAIN;QAFX;MADV,CAFqB,CAAvB,CAJE,CAaF;;MACAI,QAAQ,CAAC;QAAEU,IAAI,EAAEjB,WAAW,CAACkB,SAApB;QAA+BN;MAA/B,CAAD,CAAR;IACD,CAfD,CAeE,OAAOO,KAAP,EAAc;MACdC,OAAO,CAACC,GAAR,CAAYF,KAAZ;IACD;EACF,CAnBD;AAoBD,CAtBM;AAwBP,OAAO,MAAMG,UAAU,GAAIC,MAAD,IAAY;EACpC,OAAO,MAAOhB,QAAP,IAAoB;IACzB,IAAI;MACF,MAAMR,KAAK,CAACyB,MAAN,CACH,yDAAwDD,MAAO,EAD5D,CAAN,CADE,CAIF;MACA;;MACAhB,QAAQ,CAACD,QAAQ,EAAT,CAAR;IACD,CAPD,CAOE,OAAOa,KAAP,EAAc;MACdC,OAAO,CAACC,GAAR,CAAYF,KAAZ;IACD;EACF,CAXD;AAYD,CAbM;AAeP,OAAO,MAAMM,YAAY,GAAId,IAAD,IAAU;EACpC,OAAO,MAAOJ,QAAP,IAAoB;IACzB,IAAI;MACF,MAAM;QAAEmB,EAAF;QAAM,GAAGC;MAAT,IAAqBhB,IAA3B;MACA,MAAMZ,KAAK,CAAC6B,GAAN,CACH,yDAAwDF,EAAG,EADxD,EAEJ,EAAE,GAAGC,OAAL;QAAcZ,WAAW,EAAE;MAA3B,CAFI,CAAN;MAIAR,QAAQ,CAACD,QAAQ,EAAT,CAAR;IACD,CAPD,CAOE,OAAOa,KAAP,EAAc;MACdC,OAAO,CAACC,GAAR,CAAYF,KAAZ;IACD;EACF,CAXD;AAYD,CAbM;AAeP,OAAO,MAAMU,OAAO,GAAG,CAAClB,IAAD,EAAOmB,SAAP,KAAqB;EAC1C,OAAO,MAAOvB,QAAP,IAAoB;IACzB,IAAI;MACF,MAAMR,KAAK,CAACgC,IAAN,CACH,uDADG,EAEJpB,IAFI,CAAN;MAIAJ,QAAQ,CAACD,QAAQ,EAAT,CAAR;MACAwB,SAAS;IACV,CAPD,CAOE,OAAOX,KAAP,EAAc;MACdC,OAAO,CAACC,GAAR,CAAYF,KAAZ;IACD;EACF,CAXD;AAYD,CAbM;AAeP,OAAO,MAAMa,YAAY,GAAIC,MAAD,IAAY;EACtC,OAAO;IAAEhB,IAAI,EAAEjB,WAAW,CAACkC,aAApB;IAAmCtB,IAAI,EAAEqB;EAAzC,CAAP;AACD,CAFM;AAIP,OAAO,MAAME,YAAY,GAAIC,KAAD,IAAW;EACrC,OAAO;IAAEnB,IAAI,EAAEjB,WAAW,CAACqC,aAApB;IAAmCzB,IAAI,EAAEwB;EAAzC,CAAP;AACD,CAFM"},"metadata":{},"sourceType":"module"}